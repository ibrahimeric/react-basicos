{"version":3,"sources":["Components/Signup.jsx"],"names":["Signup","strengthLabels","_useState","useState","_useState2","_slicedToArray","strength","setStrength","React","createElement","className","action","type","name","id","placeholder","spellCheck","onChange","evt","password","strengthIndicator","lower","upper","numbers","i","length","char","charCodeAt","getStrength","target","value","concat","Fragment"],"mappings":"0JA8EeA,UAzEA,WAEb,IAAMC,EAAiB,CAAC,QAAS,UAAW,UAC5CC,EACgCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAwC5B,OACEI,IAAAC,cAAA,OAAKC,UAAU,UACXF,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,OAAKC,UAAU,QACfF,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,QAAME,OAAO,IACXH,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,SAAOG,KAAK,QAAQC,KAAK,SAASC,GAAG,SACrCC,YAAY,uBAEZP,IAAAC,cAAA,UAAI,kBAEJD,IAAAC,cAAA,SAAOI,KAAK,WAAWG,WAAW,QAClCJ,KAAK,WAAWG,YAAY,gBAC5BE,SAAU,SAAAC,GAAG,OAnDL,SAACC,GAOnB,IALA,IAAIC,GAAqB,EACzBC,GAAQ,EACRC,GAAQ,EACRC,GAAU,EAEDC,EAAI,EAAGA,EAAIL,EAASM,OAAQD,IAAI,CAEvC,IAAME,EAAOP,EAASQ,WAAYH,IAE7BF,GAASI,GAAQ,IAAMA,GAAQ,MAER,IAAvBN,GAA4BD,EAASM,OAAS,KAC/CH,GAAQ,EACRF,MAICG,GAAWG,GAAQ,IAAMA,GAAQ,MAEV,IAAvBN,GAA4BD,EAASM,OAAS,KAC/CF,GAAU,EACVH,MAICC,GAASK,GAAQ,IAAMA,GAAQ,MAClCL,GAAQ,EACRD,KAIJb,EAAYN,EAAemB,IAkBAQ,CAAYV,EAAIW,OAAOC,UAExCtB,IAAAC,cAAA,OAAKC,UAAS,QAAAqB,OAAUzB,IACtBE,IAAAC,cAAA,aAGFD,IAAAC,cAAA,OAAKC,UAAU,YAAYJ,GAAWE,IAAAC,cAAAD,IAAAwB,SAAA,KAAE,iBAAY1B,IAEpDE,IAAAC,cAAA,SAAOG,KAAK,SAASkB,MAAM","file":"static/js/10.43e2433d.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Styles/Signup.css'\r\n// Importamos el Hook useState\r\nimport { useState } from 'react'\r\n\r\nconst Signup = () => {\r\n  /* Declaramos la constante strengthLabels para indicar la seguridad de una contraseña */\r\n  const strengthLabels = ['debil', 'mediana', 'fuerte']\r\n  /* Declaramos la constante strength a la cual le asignamos un valor nulo*/\r\n  const [strength, setStrength] = useState(\"\");\r\n\r\n  /* Declaramos la constante getStrenght que obtiene como parametro la contraseña ingresada por el usuario y establece el valor de strength de acuerdo a la seguridad de la contraseña ingresada */\r\n  const getStrength = (password) => {\r\n    /* Declaramos la variable strengthIndicator y le asignamos el valor -1 y las variables lower, upper y numbers a las cuales le asignamos el valor false */\r\n    let strengthIndicator = -1,\r\n    lower = false,\r\n    upper = false,\r\n    numbers = false;\r\n    /* Con este for recorremos una por una todas las letras de la contraseña ingresada por el usuario. */\r\n    for (let i = 0; i < password.length; i++){\r\n      /* Declaramos la constante char en la que vamos a almacenar el valor unicode de las letras una a la vez. */\r\n      const char = password.charCodeAt (i);\r\n      /* En este if comprobamos si la variable upper es false y si el valor unicode almacenado en char corresponde a una letra mayuscula. */\r\n      if (!upper && char >= 65 && char <= 90) {\r\n        /* En este if verificamos la longitud de la contraseña es mayor a 4 o si el valor almacenado en strengthIndicator es igual a -1 lo que significa que todavia no se indicó la seguridad de la contraseña. En caso de cumplirse una de estas condiciones se incrementa en 1 el valor de la variable strengthIndicator */\r\n        if(strengthIndicator === -1 || password.length > 4){\r\n          upper = true;\r\n          strengthIndicator++;\r\n        }\r\n      }\r\n      /* En este if comprobamos si la variable numbers es false y si el valor unicode almacenado en char corresponde a un numero. */\r\n      if (!numbers && char >= 48 && char <= 57) {\r\n        /* En este if verificamos la longitud de la contraseña es mayor a 7 o si el valor almacenado en strengthIndicator es igual a -1 lo que significa que todavia no se indicó la seguridad de la contraseña. En caso de cumplirse una de estas condiciones se incrementa en 1 el valor de la variable strengthIndicator */\r\n        if(strengthIndicator === -1 || password.length > 7){\r\n          numbers = true;\r\n          strengthIndicator++;\r\n        }\r\n      }\r\n      /* En este if comprobamos si la variable lower es false y si el valor unicode almacenado en char corresponde a una letra minuscula. */\r\n      if (!lower && char >= 97 && char <= 122) {\r\n        lower = true;\r\n        strengthIndicator++;\r\n      }\r\n    }\r\n    /* Asignamos a la constante strength el nivel de seguridad de la contraseña dependiendo del valor de strengthIndicator. */\r\n    setStrength(strengthLabels[strengthIndicator]);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className='signUp'>\r\n        <div className=\"containerSignUp\">\r\n            <div className=\"img\"/>\r\n            <h3>Inicio de sesión</h3>\r\n            <form action=\"\">\r\n              <h6>Correo electronico:</h6>\r\n              <input type=\"email\" name=\"correo\" id=\"correo\" \r\n              placeholder=\"Correo electronico\"/>\r\n\r\n              <h6>Contraseña:</h6>\r\n              {/* Con el evento onChange llamamos a la constante getStrength cada vez que se realiza un cambio en el contenido del input */}\r\n              <input name=\"password\" spellCheck=\"false\"\r\n              type=\"password\" placeholder=\"Contraseña\"\r\n              onChange={evt => getStrength(evt.target.value)}/>\r\n              {/* Asignamos una clase con el nombre almacenado en la constante strength */}\r\n              <div className={`bars ${strength}`}>\r\n                <div></div>\r\n              </div>\r\n              {/* Indicamos la seguridad de la contraseña mostrando la palabra contraseña seguido del valor de la variable strength */}\r\n              <div className=\"strength\">{strength &&<>Contraseña {strength}</>}</div>\r\n              \r\n              <input type=\"button\" value=\"Iniciar sesión\" />\r\n            </form>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Signup"],"sourceRoot":""}