{"version":3,"sources":["Components/Body.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js"],"names":["Principal","_ref","allProducts","setAllProducts","countProducts","setCountProducts","total","setTotal","products","categorias","setAnimate","sectionProductos","sectionInicio","animationSum","document","getElementById","textContent","style","color","setTimeout","React","createElement","className","ref","length","map","product","key","id","src","urlImage","alt","nameProduct","price","onClick","find","item","_objectSpread","quantity","_toConsumableArray","concat","onAddProduct","__webpack_require__","d","__webpack_exports__","_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","i","arguments","source","ownKeys","Object","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","enumerable","forEach"],"mappings":"iKAqFeA,UAjFG,SAAHC,GAA2J,IAAtJC,EAAWD,EAAXC,YAAaC,EAAcF,EAAdE,eAAgBC,EAAaH,EAAbG,cAAeC,EAAgBJ,EAAhBI,iBAAkBC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAAQP,EAARO,SAAUC,EAAUR,EAAVQ,WAAYC,EAAUT,EAAVS,WAAYC,EAAgBV,EAAhBU,iBAA+BV,EAAbW,cAgCrJ,SAASC,IAEPC,SAASC,eAAe,WAAWC,YAAc,KAEjDF,SAASC,eAAe,WAAWE,MAAMC,MAAQ,kBAEjDR,EAAW,GAIXS,WAAW,WAAWL,SAASC,eAAe,WAAWC,YAAc,GACvEN,EAAW,IAAK,KAGlB,OAEEU,IAAAC,cAAA,OAAKC,UAAU,QAEVF,IAAAC,cAAA,MAAIC,UAAU,QAAQC,IAAKZ,GAAmBF,GAE/CW,IAAAC,cAAA,OAAKC,UAAU,UACfF,IAAAC,cAAA,OAAKC,UAAU,aAIRd,EAASgB,OAAShB,EAASiB,IAAI,SAAAC,GAAO,OAErCN,IAAAC,cAAA,OAAKC,UAAU,OAAOK,IAAKD,EAAQE,IAEjCR,IAAAC,cAAA,cAAQ,MAAGD,IAAAC,cAAA,OAAKQ,IAAKH,EAAQI,SAAUC,IAAKL,EAAQM,cAAe,KAEnEZ,IAAAC,cAAA,UAAKK,EAAQM,aAEbZ,IAAAC,cAAA,SAAG,IAAEK,EAAQO,OAGbb,IAAAC,cAAA,UAAQa,QAAS,kBAjEZ,SAAAR,GAGnB,GAAGxB,EAAYiC,KAAK,SAAAC,GAAI,OAAIA,EAAKR,KAAOF,EAAQE,KAAI,CAElD,IAAMpB,EAAWN,EAAYuB,IAAI,SAAAW,GAAI,OAAIA,EAAKR,KAAOF,EAAQE,GAAES,YAAA,GAAMD,EAAI,CAAEE,SAAUF,EAAKE,SAAW,IAAKF,IAK1G,OAHA7B,EAASD,EAAQoB,EAAQO,MAAQP,EAAQY,UACzCjC,EAAiBD,EAAgBsB,EAAQY,UACzCzB,IACOV,EAAcoC,YAAK/B,IAM5BD,EAASD,EAAQoB,EAAQO,MAAQP,EAAQY,UAGzCjC,EAAiBD,EAAgBsB,EAAQY,UAGzCnC,EAAc,GAAAqC,OAAAD,YAAKrC,GAAW,CAAEwB,KAGhCb,IAwCqC4B,CAAaf,KAAU,2BAGhDN,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,UAAI,mDAIdD,IAAAC,cAAA,OAAKC,UAAU,4CChFvBoB,EAAAC,EAAAC,EAAA,sBAAAP,IAAA,IAAAQ,EAAAH,EAAA,GACe,SAAAL,EAAAS,GACf,QAAAC,EAAA,EAAiBA,EAAAC,UAAAxB,OAAsBuB,IAAA,CACvC,IAAAE,EAAA,MAAAD,UAAAD,GAAAC,UAAAD,GAAA,GACAG,EAAAC,OAAAC,KAAAH,GAEA,oBAAAE,OAAAE,wBACAH,IAAAV,OAAAW,OAAAE,sBAAAJ,GAAAK,OAAA,SAAAC,GACA,OAAAJ,OAAAK,yBAAAP,EAAAM,GAAAE,eAIAP,EAAAQ,QAAA,SAAA/B,GACMwB,OAAAN,EAAA,EAAAM,CAAcL,EAAAnB,EAAAsB,EAAAtB,MAIpB,OAAAmB","file":"static/js/7.a72ee21c.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Styles/Body.css'\r\n\r\n\r\nconst Principal = ({allProducts, setAllProducts, countProducts, setCountProducts, total, setTotal, products, categorias, setAnimate, sectionProductos, sectionInicio}) => {\r\n  \r\n  // Metodo para añadir productos al carrito\r\n  const onAddProduct = product => {\r\n    /* Verificamos si el id del producto coincide con el id de algun \r\n    producto almacenado en el carrito */\r\n    if(allProducts.find(item => item.id === product.id)){\r\n\r\n      const products = allProducts.map(item => item.id === product.id? {...item, quantity: item.quantity + 1} : item);\r\n      \r\n      setTotal(total + product.price * product.quantity);\r\n      setCountProducts(countProducts + product.quantity);\r\n      animationSum();\r\n      return setAllProducts([...products]);\r\n    }\r\n    /* Si no se cumple la condición agregamos el producto al carrito.\r\n    */\r\n    /* Asignamos a la constante total el nuevo monto sumando el \r\n    precio por la cantidad del producto agregado */\r\n    setTotal(total + product.price * product.quantity);\r\n    /* Asignamos a la constante countProducts la nueva cantidad \r\n    sumando la cantidad agregada */\r\n    setCountProducts(countProducts + product.quantity);\r\n    /* Asignamos a la variable allProducts los productos agregados \r\n    anteriormente mas el nuevo producto */\r\n    setAllProducts([...allProducts, product]);\r\n    /* Llamamos a la funcion animationSum para iniciar una animación \r\n    */\r\n    animationSum();\r\n  };\r\n  \r\n  /* Funcion para iniciar una animacion */\r\n  function animationSum(){\r\n    /* Asignamos el valor +1 al elemento con id 'animado' */\r\n    document.getElementById('animado').textContent = '+1';\r\n    /* Asignamos un color al elemento con id 'animado' */\r\n    document.getElementById('animado').style.color = \"rgb(13, 255, 0)\";\r\n    /* Asignamos el valor 1 a la constante animate */\r\n    setAnimate(1)\r\n    /* Con la función setTimeout asignamos un valor nulo al elemento \r\n    con id 'animado' y el valor 0 a la constante animate luego de \r\n    haber transcurrido 300ms */\r\n    setTimeout(function(){document.getElementById('animado').textContent = ''\r\n    setAnimate(0)}, 300)\r\n  }\r\n\r\n  return (\r\n    // comentario\r\n    <div className=\"body\" >\r\n        {/* Mostramos con el h1 el valor de la constante categoria */}\r\n         <h1 className='title' ref={sectionProductos}>{categorias}</h1>\r\n        \r\n        <div className=\"fondo\"></div>\r\n        <div className=\"container\">\r\n          {/* Comprobamos si products es distinto de nulo. En caso de cumplirse la condicion se muestran los productos. En caso contrario se muestra un mensaje indicando que no se encontraron productos */}\r\n          {/* Aquí ejecutamos un map para mostrar todos los productos que se encuentran cargados en el archivo data.js */}\r\n          {/* Con la constante product vamos añadiendo todos los productos que se encuentran en data.js */}\r\n              {products.length ? products.map(product => (\r\n                // Creamos un div y le añadimos la clase card y el id del producto con product.id\r\n                <div className=\"card\" key={product.id}>\r\n                  {/* Cargamos la imagen con product.urlImage y el nombre del producto en alt con product.nameProduct */}\r\n                  <center>   <img src={product.urlImage} alt={product.nameProduct} /> </center>\r\n                  {/* Mostramos el nombre del producto con product.nameProduct */}\r\n                  <h6>{product.nameProduct}</h6>\r\n                  {/* Mostramos el precio del producto con product.price */}\r\n                  <p>${product.price}</p>\r\n                  {/* Creamos un boton y le añadimos el evento onClick para que cuando se precione ejecute el metodo onAddProduct que \r\n                  añade el producto al carrito*/}\r\n                  <button onClick={() => onAddProduct(product)}>Añadir al carrito</button>\r\n                </div>\r\n              )): (\r\n                <div className=\"productNotFound\">\r\n                  <h1>No se encontraron productos en esta categoria</h1>\r\n                </div>\r\n              )}\r\n        </div> \r\n        <div className=\"imgn\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Principal\r\n","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}"],"sourceRoot":""}